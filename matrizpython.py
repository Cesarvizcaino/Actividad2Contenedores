# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1T80Y4cQg0fldjDC7BJ9i7JRBpTG2sLvd
"""

import time

def crear_matriz(n):
    # Crear matrices usando comprensión de listas (más rápido que append)
    return [[1.0 for _ in range(n)] for _ in range(n)]

def multiplicar_matrices_optimizado(A, B):
    n = len(A)
    # Crear matriz resultado de una vez
    C = [[0.0 for _ in range(n)] for _ in range(n)]

    # Pre-calcular la transpuesta de B para mejor acceso a memoria
    B_trans = list(zip(*B))

    # Usar comprensión de listas y sum() para optimizar la multiplicación
    for i in range(n):
        for j in range(n):
            # Multiplicación vectorizada usando sum y zip
            C[i][j] = sum(a * b for a, b in zip(A[i], B_trans[j]))

    return C

def main():
    N = 2000
    # Crear matrices
    A = crear_matriz(N)
    B = crear_matriz(N)

    # Medir tiempo
    inicio = time.perf_counter()

    # Multiplicar matrices
    C = multiplicar_matrices_optimizado(A, B)

    # Calcular tiempo transcurrido
    tiempo = time.perf_counter() - inicio

    print(f"Tiempo de ejecución: {tiempo:.6f} segundos")

if __name__ == "__main__":
    main()